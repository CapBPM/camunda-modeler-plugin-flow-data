{"version":3,"file":"client.js","mappings":";;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrNA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;;;;;;;;;;;;;;;ACvzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA","sources":["webpack://camunda-modeler-plugin-view-inputs-and-outputs/./client/data-flow-plugin/FlowDataPlugin.js","webpack://camunda-modeler-plugin-view-inputs-and-outputs/./client/data-flow-plugin/FlowDataPluginToggle.js","webpack://camunda-modeler-plugin-view-inputs-and-outputs/./node_modules/camunda-modeler-plugin-helpers/components.js","webpack://camunda-modeler-plugin-view-inputs-and-outputs/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-plugin-view-inputs-and-outputs/./node_modules/camunda-modeler-plugin-helpers/react.js","webpack://camunda-modeler-plugin-view-inputs-and-outputs/webpack/bootstrap","webpack://camunda-modeler-plugin-view-inputs-and-outputs/webpack/runtime/compat get default export","webpack://camunda-modeler-plugin-view-inputs-and-outputs/webpack/runtime/define property getters","webpack://camunda-modeler-plugin-view-inputs-and-outputs/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-plugin-view-inputs-and-outputs/webpack/runtime/make namespace object","webpack://camunda-modeler-plugin-view-inputs-and-outputs/./client/index.js"],"sourcesContent":["const PLUGIN_NAME = 'FlowDataPlugin'\r\n\r\nclass FlowDataPlugin {\r\n  // Map<string, FlowDataBadge>\r\n  overlays = new Map();\r\n  isActive = false;\r\n\r\n  constructor(eventBus, overlays, elementRegistry, canvas) {\r\n    this.modelerEventBus = eventBus;\r\n    this.modelerOverlays = overlays;\r\n    this.modelerElementRegistry = elementRegistry;\r\n    this.onConnectionChanged();\r\n    this.onElementChanged();\r\n    this.markerToggle = canvas.toggleMarker.bind(canvas);\r\n    this.modelerEventBus.on('flowDataPlugin.toggle', ({ toggle }) => {\r\n      this.isActive = toggle;\r\n      if (toggle) {\r\n        const flows = this.modelerElementRegistry.filter((el) => !!el.waypoints);\r\n        flows.forEach((flow) => this.addFlowData(flow));\r\n      } else {\r\n        this.overlays.forEach((badge) => this.removeFlowData(badge.flow));\r\n      }\r\n    });\r\n  }\r\n\r\n  onElementChanged() {\r\n    this.modelerEventBus.on(['element.changed'], ({ element }) => {\r\n      if (this.isActive) {\r\n        const { outgoing } = element;\r\n        outgoing?.forEach((flow) => {\r\n          this.removeFlowData(flow);\r\n          this.addFlowData(flow);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onConnectionChanged() {\r\n    this.modelerEventBus.on(['connection.changed'], ({ element }) => {\r\n      if (this.isActive) {\r\n        this.updateFlowData(element);\r\n        console.log(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateFlowData(flowEl) {\r\n    const isOpen = !!this.overlays.get(flowEl.id)?.isOpen;\r\n    this.removeFlowData(flowEl);\r\n    this.addFlowData(flowEl, isOpen);\r\n  }\r\n\r\n  addFlowData(flowEl, isOpen = false) {\r\n    const exampleData = this.findExampleData(flowEl) || this.findExampleData(flowEl.source);\r\n    if (this.isValidData(exampleData)) {\r\n      const flowDataBadge = new FlowDataBadge(flowEl, this.modelerOverlays, this.markerToggle, exampleData, isOpen);\r\n      this.overlays.set(flowEl.id, flowDataBadge);\r\n    }\r\n  }\r\n\r\n  removeFlowData(flowEl) {\r\n    const flowDataBadge = this.overlays.get(flowEl.id);\r\n    if (flowDataBadge) {\r\n      this.overlays.delete(flowEl.id);\r\n      this.modelerOverlays.remove(flowDataBadge.overlayId);\r\n      flowDataBadge.destroy();\r\n    }\r\n  }\r\n\r\n  isValidData(exampleData) {\r\n    try {\r\n      JSON.parse(exampleData);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  findExampleData(element) {\r\n    const values = element?.businessObject?.extensionElements?.values\r\n    if (!values?.length) return '';\r\n    for (const val of values) {\r\n      for (const property of val.properties || []) {\r\n        if (property.name === 'camundaModeler:exampleOutputJson') {\r\n          return property.value;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nFlowDataPlugin.$inject = [\r\n  'eventBus',\r\n  'overlays',\r\n  'elementRegistry',\r\n  'canvas',\r\n];\r\n\r\nclass FlowDataBadge {\r\n\r\n  constructor(flow, overlays, toggleMarker, data, isOpen = false) {\r\n    this.flow = flow;\r\n    this.isOpen = isOpen;\r\n    this.markerToggle = toggleMarker;\r\n    this.data = data;\r\n    this.position = { top: this.getTopShifth(), left: this.getLeftShift() };\r\n    this.overlayId = overlays.add(flow, { position: this.position, html: this.getHtml(data) });\r\n    this.badge = overlays.get(this.overlayId).htmlContainer;\r\n    this.toggleBadgeView();\r\n    this.onToggleBtnEvents();\r\n  }\r\n\r\n  onToggleBtnMouseenter = () => { this.markerToggle(this.flow, 'flow-highlight'); }\r\n  onToggleBtnMouseleave = () => { this.markerToggle(this.flow, 'flow-highlight'); }\r\n  onToggleBtnClick = () => {\r\n    this.isOpen = !this.isOpen;\r\n    this.toggleBadgeView();\r\n  }\r\n\r\n  destroy() {\r\n    this.toggleBtn.removeEventListener('mouseenter', this.onToggleBtnMouseenter);\r\n    this.toggleBtn.removeEventListener('mouseleave', this.onToggleBtnMouseleave);\r\n    this.toggleBtn.removeEventListener('click', this.onToggleBtnClick);\r\n  }\r\n\r\n  get toggleBtn() {\r\n    return this.badge.querySelector('.flow-data-toggle-btn');\r\n  }\r\n\r\n  get content() {\r\n    return this.badge.querySelector('.flow-data-content');\r\n  }\r\n\r\n  getLeftShift() {\r\n    const coordinatesX = this.flow.waypoints.map(({ x }) => x);\r\n    const [pointA, pointB] = this.flow.waypoints;\r\n    const direction = this.getLineDirection(pointA, pointB);\r\n    const minX = Math.min(...coordinatesX);\r\n    const shift = direction === 'W' ? -65 : 15;\r\n    return pointA.x - minX + shift;\r\n  }\r\n\r\n  getTopShifth() {\r\n    const coordinatesY = this.flow.waypoints.map(({ y }) => y);\r\n    const [pointA, pointB] = this.flow.waypoints;\r\n    const direction = this.getLineDirection(pointA, pointB);\r\n    const minY = Math.min(...coordinatesY);\r\n    const shift = direction === 'N' ? -25 : 25;\r\n    return pointA.y - minY + shift;\r\n  }\r\n\r\n  getLineDirection(pointA, pointB) {\r\n    if (pointA.x === pointB.x) {\r\n      if (pointA.y > pointB.y) return 'N';\r\n      if (pointA.y < pointB.y) return 'S';\r\n    }\r\n    if (pointA.y === pointB.y) {\r\n      if (pointA.x > pointB.x) return 'W';\r\n      if (pointA.x < pointB.x) return 'E';\r\n    }\r\n    if (pointA.x > pointB.x) {\r\n      if (pointA.y > pointB.y) return 'NW';\r\n      if (pointA.y < pointB.y) return 'SW';\r\n    }\r\n    if (pointA.x < pointB.x) {\r\n      if (pointA.y > pointA.x) return 'NE';\r\n      if (pointA.y < pointA.x) return 'SE';\r\n    }\r\n  }\r\n\r\n  getHtml(content) {\r\n    const parsed = JSON.parse(content);\r\n    const pretty = JSON.stringify(parsed, null, 2);\r\n    return `\r\n      <div class=\"flow-data\">\r\n        <div class=\"flow-data-content\">\r\n          <pre>${pretty}</pre>\r\n        </div>\r\n        <button class=\"flow-data-toggle-btn\"></button>\r\n      </div>`\r\n  }\r\n\r\n  onToggleBtnEvents() {\r\n    this.toggleBtn.addEventListener('mouseenter', this.onToggleBtnMouseenter);\r\n    this.toggleBtn.addEventListener('mouseleave', this.onToggleBtnMouseleave);\r\n    this.toggleBtn.addEventListener('click', this.onToggleBtnClick);\r\n  }\r\n\r\n  toggleBadgeView() {\r\n    const parsed = JSON.parse(this.data);\r\n    const key = Object.keys(parsed)?.[0] || JSON.stringify(parsed);\r\n    this.toggleBtn.textContent = this.isOpen ? 'Hide' : key;\r\n    this.isOpen ? this.showFlowDataContent() : this.hideFlowDataContent();\r\n  }\r\n\r\n  showFlowDataContent() {\r\n    this.content.style.padding = `5px`;\r\n    this.content.style.width = `${this.content.scrollWidth + 5}px`;\r\n    this.content.style.height = `${this.content.scrollHeight}px`;\r\n    this.content.style.bottom = `${-1 * (this.content.scrollHeight + 5)}px`;\r\n    this.content.style.left = `${-((this.content.scrollWidth / 2) - 25)}px`;\r\n  }\r\n\r\n  hideFlowDataContent() {\r\n    this.content.style.width = '0px';\r\n    this.content.style.height = '0px';\r\n    this.content.style.padding = `0px`;\r\n  }\r\n}\r\n\r\nexport default {\r\n  __init__: [PLUGIN_NAME],\r\n  [PLUGIN_NAME]: ['type', FlowDataPlugin]\r\n};","import React, { Fragment, PureComponent } from 'camunda-modeler-plugin-helpers/react';\r\nimport { Fill } from 'camunda-modeler-plugin-helpers/components';\r\n\r\nexport default class FlowdataPluginToggle extends PureComponent {\r\n  tabStates = new Map();\r\n  currentTabId = '';\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { toggle: false };\r\n    this.subscribe = props.subscribe;\r\n    this.onModelerCreated();\r\n    this.onTabChange();\r\n  }\r\n\r\n  onModelerCreated() {\r\n    this.subscribe('bpmn.modeler.created', (event) => {\r\n      const { modeler, tab } = event;\r\n      this.tabStates.set(tab.id, { modeler, toggle: false });\r\n      this.setEventBus(modeler);\r\n    });\r\n  }\r\n\r\n  onTabChange() {\r\n    this.subscribe('app.activeTabChanged', ({ activeTab }) => {\r\n      this.rememberToggleStateForTab(this.currentTabId);\r\n      this.currentTabId = activeTab.id;\r\n      this.applyTabState(activeTab.id);\r\n    });\r\n  }\r\n\r\n  applyTabState(tabId) {\r\n    const tabState = this.tabStates.get(tabId);\r\n    if (tabState) {\r\n      const { modeler, toggle } = tabState;\r\n      this.setEventBus(modeler);\r\n      this.setState({ toggle });\r\n    } else {\r\n      this.setState({ toggle: false });\r\n    }\r\n  }\r\n\r\n  setEventBus(modeler) {\r\n    this.eventBus = modeler.get('eventBus');\r\n  }\r\n\r\n  rememberToggleStateForTab(tabId) {\r\n    const tabState = this.tabStates.get(tabId);\r\n    if (tabState) {\r\n      tabState.toggle = this.state.toggle;\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    const toggle = !this.state.toggle\r\n    this.setState({ toggle });\r\n    this.eventBus.fire('flowDataPlugin.toggle', { toggle });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Fill slot=\"status-bar__file\">\r\n          <label htmlFor='flow-data-plugin-toggle' className='pluggin-toggle'>\r\n            <input type='checkbox' id='flow-data-plugin-toggle' checked={this.state.toggle} onChange={() => this.toggle()} />\r\n            View IO\r\n          </label>\r\n        </Fill>\r\n      </Fragment>\r\n    )\r\n  }\r\n}","if (!window.components) {\r\n  throw notCompatible('3.4');\r\n}\r\n\r\nfunction notCompatible(requiredVersion) {\r\n  return new Error('Not compatible with Camunda Modeler < v' + requiredVersion);\r\n}\r\n\r\nexport const NotCompatible = function(requiredVersion) {\r\n  return function NotCompatibleComponent() {\r\n    throw notCompatible(requiredVersion);\r\n  };\r\n};\r\n\r\n/**\r\n * Fill component. Set `slot` to \"toolbar\" to include in the top toolbar.\r\n * Use `group` and `priority=0` to place for correct ordering. The higher\r\n * the priority, the earlier the Fill is displayed within the group.\r\n *\r\n * @type {import('react').ComponentType<{ slot: string, group?: string, priority?: Number }>}\r\n *\r\n * @example\r\n *\r\n * import { Fill } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomFill(props) {\r\n *   return (\r\n *     <Fill group=\"4_export\" slot=\"toolbar\" priority={100}>\r\n *       <button type=\"button\" onClick={ props.openExportTool }>\r\n *         Open Export Tool\r\n *       </button>\r\n *     </Fill>\r\n *   );\r\n * }\r\n */\r\nexport const Fill = window.components.Fill;\r\n\r\n/**\r\n * Modal component.\r\n *\r\n * @type {import('react').ComponentType<{ onClose: Function }>}\r\n *\r\n * @example\r\n *\r\n * import { Modal } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomModal(props) {\r\n *   return (\r\n *    <Modal onClose={ props.onClose }>\r\n *      <Modal.Title>\r\n *        Custom Modal\r\n *      </Modal.Title>\r\n *      <Modal.Body>\r\n *        Hello world!\r\n *      </Modal.Body>\r\n *      <Modal.Footer>\r\n *        <button type=\"button\" onClick={ props.onClose }>\r\n *          Close\r\n *        </button>\r\n *      </Modal.Footer>\r\n *    </Modal>\r\n *   );\r\n * }\r\n */\r\nexport const Modal = window.components.Modal;\r\n\r\n/**\r\n * Overlay component.\r\n *\r\n * @type {import('react').ComponentType<{ \r\n *  onClose: Function, \r\n *  anchor: Node, \r\n *  offset?: { top?: number, bottom?: number, left?: number, right?: number }, \r\n *  maxWidth?: number | string,\r\n *  maxHeight?: number | string,\r\n *  minWidth?: number | string,\r\n *  minHeight?: number | string\r\n * }>}\r\n *\r\n * @example\r\n * \r\n * import { Overlay } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomOverlay(props) {\r\n *   return (\r\n *    <Overlay onClose={ props.onClose } anchor={ props.btn_ref } offset={ props.anchor }>\r\n *      <Overlay.Title>\r\n *        Custom Modal\r\n *      </Overlay.Title>\r\n *      <Overlay.Body>\r\n *        Hello world!\r\n *      </Overlay.Body>\r\n *      <Overlay.Footer>\r\n *        <button type=\"button\" onClick={ props.onClose }>\r\n *          Close\r\n *        </button>\r\n *      </Overlay.Footer>\r\n *    </Overlay>\r\n *   );\r\n * }\r\n */\r\n export const Overlay = window.components.Overlay || NotCompatible('5.0');\r\n\r\n /**\r\n * Section component.\r\n *\r\n * @type {import('react').ComponentType<{ maxHeight: Number | String, relativePos: Boolean } }>}\r\n *\r\n * @example\r\n * \r\n * import { Section } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomSection(props) {\r\n *   return (\r\n *    <Section maxHeight=\"240px\">\r\n *     <Section.Header>\r\n *       Custom section\r\n *     </Section.Header>\r\n *     <Section.Body>\r\n *       Hello world!\r\n *     </Section.Body>\r\n *     <Section.Actions>\r\n *      <button type=\"button\" onClick={ props.onClose }>\r\n *        Close\r\n *      </button>\r\n *     </Section.Actions>\r\n *    </Section>\r\n *   );\r\n * }\r\n */\r\nexport const Section = window.components.Section || NotCompatible('5.0');\r\n\r\n /**\r\n * ToggleSwitch component.\r\n *\r\n * @type {import('react').ComponentType<{ id: string, name: string, label?: string, switcherLabel?: string, description?: string }>}\r\n *\r\n * @example\r\n * \r\n * import { ToggleSwitch } from 'camunda-modeler-plugin-helpers/components';\r\n *\r\n * function CustomToggle(props) {\r\n *   return (\r\n *    <Formik initialValues={ initialValues } onSubmit={ this.onSubmit }>\r\n *      {() => (\r\n *        <Form>\r\n *          <Field\r\n *            component={ ToggleSwitch }\r\n *            switcherLabel=\"Switcher label\"\r\n *            id={ id }\r\n *            name={ name }\r\n *            description=\"Toggle description\"\r\n *          />\r\n *        </Form>\r\n *       )}\r\n *    </Formik>\r\n *   );\r\n * }\r\n */\r\nexport const ToggleSwitch = window.components.ToggleSwitch || NotCompatible('5.0');","/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {Object} plugin\r\n * @param {String} type\r\n */\r\nexport function registerClientPlugin(plugin, type) {\r\n  var plugins = window.plugins || [];\r\n  window.plugins = plugins;\r\n\r\n  if (!plugin) {\r\n    throw new Error('plugin not specified');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new Error('type not specified');\r\n  }\r\n\r\n  plugins.push({\r\n    plugin: plugin,\r\n    type: type\r\n  });\r\n}\r\n\r\n/**\r\n * Validate and register a client plugin.\r\n *\r\n * @param {import('react').ComponentType} extension\r\n *\r\n * @example\r\n *\r\n * import MyExtensionComponent from './MyExtensionComponent';\r\n *\r\n * registerClientExtension(MyExtensionComponent);\r\n */\r\nexport function registerClientExtension(component) {\r\n  registerClientPlugin(component, 'client');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerPlatformBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerPlatformBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerCloudBpmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const BpmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerCloudBpmnJSPlugin(BpmnJSModule);\r\n */\r\nexport function registerCloudBpmnJSPlugin(module) {\r\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\r\n}\r\n\r\n/**\r\n * Validate and register a bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a platform specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerPlatformBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a cloud specific bpmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerCloudBpmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-moddle extension plugin.\r\n *\r\n * @param {Object} descriptor\r\n *\r\n * @example\r\n * import {\r\n *   registerDmnJSModdleExtension\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * var moddleDescriptor = {\r\n *   name: 'my descriptor',\r\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\r\n *   prefix: 'mydesc',\r\n *\r\n *   ...\r\n * };\r\n *\r\n * registerDmnJSModdleExtension(moddleDescriptor);\r\n */\r\nexport function registerDmnJSModdleExtension(descriptor) {\r\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\r\n}\r\n\r\n/**\r\n * Validate and register a dmn-js plugin.\r\n *\r\n * @param {Object} module\r\n *\r\n * @example\r\n *\r\n * import {\r\n *   registerDmnJSPlugin\r\n * } from 'camunda-modeler-plugin-helpers';\r\n *\r\n * const DmnJSModule = {\r\n *   __init__: [ 'myService' ],\r\n *   myService: [ 'type', ... ]\r\n * };\r\n *\r\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\r\n * registerDmnJSPlugin(DmnJSModule, 'drd')\r\n */\r\nexport function registerDmnJSPlugin(module, components) {\r\n\r\n  if (!Array.isArray(components)) {\r\n    components = [ components ]\r\n  }\r\n\r\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`)); \r\n}\r\n\r\n/**\r\n * Return the modeler directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getModelerDirectory() {\r\n  return window.getModelerDirectory();\r\n}\r\n\r\n/**\r\n * Return the modeler plugin directory, as a string.\r\n *\r\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\r\n *\r\n * @return {String}\r\n */\r\nexport function getPluginsDirectory() {\r\n  return window.getPluginsDirectory();\r\n}","if (!window.react) {\r\n  throw new Error('Not compatible with Camunda Modeler < 3.4');\r\n}\r\n\r\n/**\r\n * React object used by Camunda Modeler. Use it to create UI extension.\r\n *\r\n * @type {import('react')}\r\n */\r\nmodule.exports = window.react;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBpmnJSPlugin, registerClientExtension } from 'camunda-modeler-plugin-helpers';\r\nimport FlowDataPlugin from './data-flow-plugin/FlowDataPlugin';\r\nimport FlowdataPluginToggle from './data-flow-plugin/FlowDataPluginToggle';\r\n\r\nregisterBpmnJSPlugin(FlowDataPlugin);\r\nregisterClientExtension(FlowdataPluginToggle)\r\n"],"names":[],"sourceRoot":""}